{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/ShowTodos.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectedTodoID","setTodoID","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","query","handleQueryChange","clearQuery","handleFilterSelect","onChange","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","ShowTodos","TodoModal","clearTodo","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","fetchedUser","href","email","name","App","setTodos","All","selectedTodos","setSelectedTodos","setQuery","setSelectedTodoID","fetchedTodos","visibleTodos","useMemo","showTodos","Active","filter","Completed","getVisibleTodos","filteredTodos","filterQuery","toLowerCase","includes","find","currentTodo","event","target","todoID","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84fbae0d.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoID: null | number,\n  setTodoID: (todoID: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    todos,\n    selectedTodoID,\n    setTodoID,\n  }) => (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={cn({\n              'has-background-info-light': selectedTodoID === todo.id,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setTodoID(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn(\n                      'far',\n                      {\n                        'fa-eye': selectedTodoID !== todo.id,\n                        'fa-eye-slash': selectedTodoID === todo.id,\n                      },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ),\n);\n","type Props = {\n  query: null | string,\n  handleQueryChange: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  clearQuery: () => void,\n  handleFilterSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  handleQueryChange,\n  clearQuery,\n  handleFilterSelect,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          onChange={handleFilterSelect}\n          data-cy=\"statusSelect\"\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        value={query ?? ''}\n        onChange={handleQueryChange}\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n      />\n\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {!!query && (\n        // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={clearQuery}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export const enum ShowTodos {\n  All,\n  Active,\n  Completed,\n}\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo,\n  clearTodo: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, clearTodo }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState <null | User>(null);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(fetchedUser => {\n        setUser(fetchedUser);\n        setIsLoading(false);\n      });\n  }, [todo.id]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={clearTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n              >\n                {todo.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { ShowTodos } from './types/ShowTodos';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodos, setSelectedTodos] = useState<ShowTodos>(ShowTodos.All);\n  const [query, setQuery] = useState<null | string>(null);\n  const [selectedTodoID, setSelectedTodoID] = useState<null | number>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then(fetchedTodos => {\n        setTodos(fetchedTodos);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleFilterSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    switch (event.target.value) {\n      case 'active':\n        setSelectedTodos(ShowTodos.Active);\n        break;\n\n      case 'completed':\n        setSelectedTodos(ShowTodos.Completed);\n        break;\n\n      default:\n        setSelectedTodos(ShowTodos.All);\n        break;\n    }\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const clearQuery = () => setQuery(null);\n\n  const setTodoID = (todoID: number) => setSelectedTodoID(todoID);\n\n  const clearTodo = () => setSelectedTodoID(null);\n\n  const getVisibleTodos = (showTodos: ShowTodos) => {\n    switch (showTodos) {\n      case ShowTodos.Active:\n        return todos.filter(todo => !todo.completed);\n\n      case ShowTodos.Completed:\n        return todos.filter(todo => todo.completed);\n\n      default:\n        return todos;\n    }\n  };\n\n  const visibleTodos = React.useMemo(\n    () => getVisibleTodos(selectedTodos),\n    [selectedTodos, todos],\n  );\n\n  const getFilteredTodos = (filterQuery: null | string) => {\n    return filterQuery\n      ? visibleTodos.filter(todo => todo.title.toLowerCase()\n        .includes(filterQuery.toLowerCase()))\n      : visibleTodos;\n  };\n\n  const filteredTodos = React.useMemo(\n    () => getFilteredTodos(query),\n    [query, visibleTodos],\n  );\n\n  const todo = todos.find(currentTodo => currentTodo.id === selectedTodoID);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                handleQueryChange={handleQueryChange}\n                clearQuery={clearQuery}\n                handleFilterSelect={handleFilterSelect}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    selectedTodoID={selectedTodoID}\n                    setTodoID={setTodoID}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todo && <TodoModal todo={todo} clearTodo={clearTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}